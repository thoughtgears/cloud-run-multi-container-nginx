upstream users_backend {
    server users-service:443 max_fails=3 fail_timeout=30s;
}

upstream ping_backend {
    server ping-service:443 max_fails=3 fail_timeout=30s;
}

server {
    listen 8080;
    server_name _;
    add_header X-Content-Type-Options "nosniff";
    add_header X-XSS-Protection "1; mode=block";

    set $cors_origin "https://portal.thoughtgears.dev";

    # Internal location for the authentication helper
    location = /_validate_client_credentials {
        internal;
        proxy_pass http://127.0.0.1:8081/auth;

        proxy_set_header Authorization $http_authorization;
        # proxy_set_header X-Api-Key $http_x_api_key; # If you use X-Api-Key header

        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        # Pass any other headers your AuthHandler might need to determine auth type/mode
        # proxy_set_header X-Original-URI $request_uri;
    }

    # Internal location for getting a GCP token for backend authentication
    location = /_fetch_gcp_token {
        internal;
        # $cloud_run_audience will be set in the calling location (e.g., /ping)
        proxy_pass http://127.0.0.1:8081/get-token?audience=$cloud_run_audience;

        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
    }

    # Internal location for Combined Flow authentication, authenticates Firebase Token and returns a GCP token
    # This is due to not having the ability to use multiple auth_request_set directives in a single location block.
    location = /_combined_auth_flow_orchestrator {
        internal;
        proxy_set_header Authorization $http_authorization;
        proxy_pass http://127.0.0.1:8081/auth/combined-flow?gcp_audience=$cloud_run_audience;

        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        # If your CombinedFlowHandler needs other details from the original request, pass them here.
        # proxy_set_header X-Original-URI $request_uri;
    }

    location /users {
        # --- CORS HEADERS for /users ---
        if ($request_method = 'OPTIONS') {
            add_header "Access-Control-Allow-Origin" "$cors_origin" always;
            add_header "Access-Control-Allow-Methods" "GET, POST, OPTIONS, PUT, DELETE, PATCH" always;
            add_header "Access-Control-Allow-Headers" "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization" always;
            add_header "Access-Control-Max-Age" 1728000 always;
            add_header "Content-Type" "text/plain; charset=utf-8" always;
            add_header "Content-Length" 0 always;
            return 204;
        }

        # Handle actual GET/POST requests for this location
        if ($request_method ~* "(GET|POST)") {
            add_header "Access-Control-Allow-Origin" "$cors_origin" always;
            add_header "Access-Control-Allow-Methods" "GET, POST, OPTIONS" always; # Methods relevant to the actual request
            add_header "Access-Control-Allow-Headers" "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization" always;
            add_header "Access-Control-Expose-Headers" "Content-Length,Content-Range" always;
        }
        # --- End CORS HEADERS for /users ---

        # --- GCP Cloud Run Authentication for /users (simple, direct GCP token) ---
        set $cloud_run_audience "https://users-service";
        auth_request /_fetch_gcp_token;
        auth_request_set $gcp_auth_token_users $upstream_http_x_auth_token;
        proxy_set_header Authorization "Bearer $gcp_auth_token_users";
        # --- End GCP Cloud Run Authentication -

        proxy_pass https://users_backend;
        proxy_ssl_verify on;
        proxy_ssl_server_name on;
        proxy_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;
        proxy_ssl_name users-service;
        proxy_set_header Host "users-service";
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
    }

    location /ping {
        # --- CORS HEADERS for /ping ---
        if ($request_method = 'OPTIONS') {
            add_header "Access-Control-Allow-Origin" "$cors_origin" always;
            add_header "Access-Control-Allow-Methods" "GET, POST, OPTIONS, PUT, DELETE, PATCH" always;
            add_header "Access-Control-Allow-Headers" "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization" always;
            add_header "Access-Control-Max-Age" 1728000 always;
            add_header "Content-Type" "text/plain; charset=utf-8" always;
            add_header "Content-Length" 0 always;
            return 204;
        }

        set $cloud_run_audience "https://ping-service";
        auth_request /_combined_auth_flow_orchestrator;
        auth_request_set $gcp_auth_token_ping $upstream_http_x_gcp_token;
        auth_request_set $auth_method $upstream_http_x_auth_method;

        if ($request_method ~* "(GET|POST)") {
            add_header "Access-Control-Allow-Origin" "$cors_origin" always;
            add_header "Access-Control-Allow-Methods" "GET, POST, OPTIONS" always;
            add_header "Access-Control-Allow-Headers" "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization" always;
            add_header "Access-Control-Expose-Headers" "Content-Length,Content-Range" always;
        }
        # --- End CORS HEADERS for /ping ---

        # --- Preserve incoming Firebase Authorization header ---
        # Capture the original Authorization header from the client (Firebase token)
        # and pass it to the backend under a new name.
        # Do this BEFORE auth_request might alter things or you set the new Authorization header.
        set $firebase_token $http_authorization; # Store it in a variable first
        proxy_set_header X-Firebase-Authorization $firebase_token;
        proxy_set_header Authorization "Bearer $gcp_auth_token_ping";


        proxy_pass https://ping_backend;
        proxy_ssl_verify on;
        proxy_ssl_server_name on;
        proxy_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;
        proxy_ssl_name ping-service;
        proxy_set_header Host "ping-service";
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
    }

    location / {
        return 404;
    }
}
